[] Pollardexempel

[] Kvadratiskt såll

[] Multiplication av polynom och stora tal


Kompendium på papper
    100 :-
    Exp. O.B. 2
    


Pollard     ((Pollard-rho))

    f(z): return z² + 1

    Pollard(N, x0).
        x1 = x2 = x0; d = 1
        while d == 1:
            x1 = f(x1) mod N
            x2 = f(f(x2)) mod N
            d = gcd(abs(x2 - x1), N)
        return d



Pollard, exempel

    N = 299 (= 13⋅23), x0 = 0
    
    ┌──────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐
    │x1    │  1  │  2* │  5  │  26*│ 79  │ 262*│ 174 │  78 │ 105 │
    ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
    │x2    │  2  │ 26  │ 262 │  78 │  …  │  …  │  …  │  …  │  …  │
    ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
    │diff  │  1  │ 24  │ 257 │  52 │  …  │  …  │  …  │  …  │  …  │
    ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
    │gcd   │  1  │  1  │  1  │ »13«│  …  │  …  │  …  │  …  │  …  │
    ┝━━━━━━┿━━━━━┿━━━━━┿━━━━━┿━━━━━┿━━━━━┿━━━━━┿━━━━━┿━━━━━┿━━━━━┥
    │x1(13)│  1  │  2* │  5  │ »0«*│  1  │  2* │  5  │  0* │  1  │
    ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
    │x1(23)│  1  │  2* │  5  │  3* │ 10  │  9* │ 13  │  9* │ 13  │
    ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
    │x2(13)│  2  │  0  │  2  │ »0« │  …  │  …  │  …  │  …  │  …  │
    ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
    │x2(23)│  2  │  3  │  9  │  9  │  …  │  …  │  …  │  …  │  …  │
    └──────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘
    


Kvadratiskt såll    (en. Quadratic sieve)

    Idé med kvadratiska ekvatiooner
    
    Kombinera relationer
    
    Övergripande beskrivning av QS
    
    
    Vill hittas a ≢_N ± b       a ≡_N = b   (a ≡ b (mod b))
    
    Där a² ≢_n b²
    
    
    Förra gången:   Fermats metod
    
        Q_ab = (⌈√[aN]⌉ + b)² mod N
                {   = x   }
        
        hoppas att Q_ab är en kvadrat över heltalen Q_ab = y²
        
                x² ≡ y² (mod N)
        
        Q_ab kvadrat över heltalen med sannolikheten ~ 1 / ∜N
        
            För pollard ~ √p steg där p är minsta prmtal som delar N (p ≤ √N)
            

            
Kvadratiska såll, idé

    N = 1023  [[fel]]
    
    47² mod N = 63  = 3² ⋅  7
    49² mod N = 255 = 3  ⋅  5 ⋅ 17
    51² mod N = 455 = 5  ⋅  7 ⋅ 13
    53² mod N = 663 = 3  ⋅ 13 ⋅ 17
    
    
    (47⋅49⋅51⋅53)² = (3²⋅5⋅7⋅13⋅17)² (mod N)
              536² =  943² (mod N)
              536  ≠ ±943  (mod N)

    gcd(943 + 546, N) = gcd(1479, 1073) = 29
    
            N = 29⋅37



Kvadratiskta sållet:

    Fas 1:  Bilda ”faktorbas” med små primtal
    
            F_B  = {−1} ∪ {p | primtal ≤ B}
    
    
    Fas 2:  Hittas  |F_B| + 1  stycken a, b     Q_ab = (⌈√[aN]⌉ + b)² mod N
    
            där Q_ab faktoriserar över F_B
    
    
    Fas 3:  Välj ut en delmängd av Q_ab från steg 2
    
            så deras produkt innehåller varje p ∈ F_B ett jämnta antal gånger (inklusive 0 gånger).
    
    
    
    Från steg 2 har vi fått:
    
        Q₁, Q₂, …, Q_t      (t = |F_B| + 1)
    
    Q_i = ∏ [p ∈ F_B] p↑{α_{i,p}}
    
    Q₁ = 45 = 3 ⋅ 3 ⋅ 5 = (−1)⁰ ⋅ 2⁰ ⋅ 3² ⋅ 5¹   ⋅   0 ⋅ 0 ⋅ 0 ⋅ …
    
        α₁,₋₁ = 0   α₁,₂ = 0    α₁,₃ = 2    α₁,₅ = 1
    
          ⎧ 1    om Q_i ska vara med i produkten
    x_i = ⎨
          ⎩ 0    annars


    ⎛α₁,₋₁  α₂,₋₁   ⋯   ⋯   ⋯   α_t,₋₁⎞⎛ x₁⎞   ⎛ 0 ⎞
    ⎜α₁,₂     ⋮     ⋱   ⋱   ⋱      ⋮  ⎟⎜ x₂⎟   ⎜ ⋮ ⎟
    ⎜ ⋮       ⋮     ⋱   ⋱   ⋱      ⋮  ⎟⎜ ⋮ ⎟   ⎜ ⋮ ⎟
    ⎜ ⋮       ⋮     ⋱   ⋱   ⋱      ⋮  ⎟⎜ ⋮ ⎟ = ⎜ ⋮ ⎟
    ⎜ ⋮       ⋮     ⋱   ⋱   ⋱      ⋮  ⎟⎜ ⋮ ⎟   ⎜ ⋮ ⎟
    ⎜ ⋮       ⋮     ⋱   ⋱   ⋱      ⋮  ⎟⎜ ⋮ ⎟   ⎜ ⋮ ⎟
    ⎝α₁,_B  α²,_B   ⋯   ⋯   ⋯   α_t,B ⎠⎝x_t⎠   ⎝ 0 ⎠
    
                    mod 2
    
        |F_B| rader,        |F_B|+1 kolonner
    
    
    
    B ~ 2↑{c√[ln N ln ln N]}
    T ~ e↑√[ln N ln ln N]
    
    
    fixera a    Q_b = (⌈√[aN]⌉ + b)² mod N
    
    tab[b] ← Q_b
    for each p ∈ F_B
        Finn b så att p | Q_b
            while p|tab[b + ip]
                tab[b + ip] /← p
                
    Om Q_b faktoriserar över F_B
    så tab[b] = 1
    
    
    Kostar mycket; approximation:
    
        tab[b] ← log Q_b    //flyttalsapproximation
        for each p find b s/t p might divide Q_b (lös kvadratisk ekvation mod p)
            ⋮
            tab[b + ip] ← tab[b + ip] − log p
        
        Om Q_b faktoriserar över F_B så
            har vi tab[b] ≈ 0
        



Polynommultiplication       Karatsuba's algoritm

    (ax + b)(cx + d) = ac⋅x² + (ad + bc)x + bd      ac ≜ u,  bd ≜ v
                               { w−u−v }
    u = ac
    v = bd
    w = (a + b)(c + d) = ac + bc + ad + bd = u + bc + ad + v


    p(x) = Σ[i = 0 → 2t − 1] p_i x↑i    q(x) = Σ[i = 0 → 2t − 1] q_i x↑i

    p(x) = Σ[i = 0 → 2t − 1] p_i x↑i + x↑t Σ[i = 0 → 2t − 1] p_{t+i} x↑i
           {       b(x) = b        }   {           a(x) = a            }
   
    q(x) = c(x)⋅x↑t + d(x)
    
    p⋅q = (a⋅x↑t + b)(cx↑t + d) =
        = acx↑{2t} + (ad + bc)x↑t + bd
                                            {         t         }
    u(x) = a(x)⋅c(x)                        [ | | | | | | | | | ]   a(x)
    v(x) = b(x)⋅d(x)
    w(x) = [a(x) + b(x)][c(x) + d(x)]       {        2t         }
                                            [|||||||||||||||||||]   p(x)
    
    T(n) = 3T(n/2) + kn
    
    T(n) = Θ(n↑{log₂ 3}) = 𝓸(n↑1,59)


För tal

    A = Σ[i = 0 → n − 1] a_i 2↑i = 2↑{n/2} Σ[i = 0 → ½n − 1] a_{n/2+i} 2↑i + Σ[i = 0 → ½n − 1] = a_i 2↑i
                                           {              a              }   {             b           }
    
    X  [   a   |   b   ]                Välj större bas än 2:
    Y  [   c   |   d   ]                    β↑k    ger snabb utskrivt i bas β
                                            2↑k    ger snabbare multiplication i long[], välj bas 32 i 64 arch.
                                                   man kan använda minnessiffra (carry)



