\input texinfo   @c -*-texinfo-*-

@c %**start of header
@setfilename software-engineering.info
@settitle programutvecklingsteknik
@afourpaper
@documentencoding UTF-8
@documentlanguage sv
@finalout
@c %**end of header



@ifnottex
@node Top
@top software engineering
@end ifnottex

@titlepage
@title programutvecklingsteknik
@author Mattias Andrée
@end titlepage

@contents




@chapter Designmönster


@table @bullet

@item Façade (viktig)
En klass ger ett enkelt gränssnitt till ett komplext system, som kan,
men behöver inte, bestå av flera klasser.

@item Template Method (viktig)
I en superklass definieras en algoritms huvuddrag. Delar av algoritmen definie-
ras i subklasser eller definieras om i subklasser.

@item Proxy (viktig)
Ett objekt kontrollerar åtkomsten till ett annat objekt. De båda implementerar
samma gränssnitt.

@item Iterator (viktig)
Man får tillgång till ett antal objekt i sekvens, utan att behöva känna till hur
de egentligen är organiserade.

@item Strategy (viktig)
En del av en algoritm är utbytbar medan programmet kör, ingen omkompilering
behövs för att byta. Den utbytbara delen är inkapslad i ett objekt.

@item Abstract Factory
Grupperar objekt faktorier som har ett gemensamt tema.

@item Factory Method (viktig)
Skapar okjekt utan att man behöver specifiera exakt klass.

@item Builder (ej viktig)
Konstruerar komplexa object genom att separera konstruktion och representation.

@item Prototype
Skapar ett objekt genom att klona ett existerande objekt.

@item Singleton (viktig)
Begränsar klassen till att bara konstrueras en gång, gör det objektet
åtkommit gör alla. Konstruktion sker när objektet hämtas för första gången.

Singleton möstret bär endast användas om ett objekt faktiskt behövs.

@item Adapter (ej viktig)
Tillåter klasser med inkompatibelt gränssnitt att arbeta ihop genom att
wrap:a dem med sitt egna gränssnitt.

@item Bridge (ej viktig)
Frikopplar en abstraktion från sin implementation so att de två kan variera obroende.

@item Composite (viktig)
Sammansätter noll eller fler liknande objekt so att de kan användas
och manipuleras som ett objekt.

@item Decorator (viktig)
Dynamiskt lägger till eller skriver över beteende till en existerande metod av ett
objekt.

@item Flyweight (ej viktig)
Reducerar kostnad av att skapa och manipulera stora antal av liknande objekt.

@item Chain of responsibility
Delegerar instruktioner till en kedja av behandlande objekt.

@item Command
Skapar objekt som enkapsulerar händelser och parametrar.

Detta brukar användas för att implementera undo och redo.

@item Interpreter (ej viktig)
Implementerar ett specialiserat språk.

@item Mediator
Tillåter lös koppling mellan klasser genom att vara den enda klassen som har
detaljerad kännedom om deras metoder.

@item Memento (ej viktig)
Tillåter undansparning av tillstånd ett objekt så att man kan hoppa tillbaka
till dem.

@item Observer (viktig)
Händelseaggregation som tillåter flera objekt att lyssna på en händelse.

@item State
Tillåter ett objekt ett ändra sitt beteende när dess interna tillstån ändras.

@item Visitor (ej viktig)
Separerar en algoritm från en objektstruktur genom att flytta hierarkin av
metoder till ett annat objekt.

@end table



@chapter Testning

@table @bullet

@item Mock Object
Dumt objekt som används för att testa en klass, utan att ett beroende
är implementerat. Det är alltså en minimal implementation som inte
används när programmet är klart.

@item JUnit (unit testing)
Java-ramverk för automatiserad testning som används bland annat inom
Extreme Programming.

@end table



@chapter Nätverksprogram

@table @bullet

@item server
Ett program som tillåter att andra program kopplar upp sig till programmet.

@item port
Nummer på datorn som används för att identifera vilket program en anslutning
sker till. En server sägs lyssna på en port, till exemple port 80 för om det
är en Webb server.

@item tråd
En server behöver en tråd för varje klient. En server eller klient behöver
dessutom en extra tråd per kontakt om kommunikations är fullt duplex (lyssnar
och sänder parallellt.)

@item socket
varje ände av en uppkopplad förbindelse finns en socket. En server har en
server socket för att lyssna efter nya anslutningar och en klient socket för
varföra uppkoppling.

@item ström
En socket har två sröm objekt och genom dem kan information sändas respiktive
tas emot.

@end table



@bye

